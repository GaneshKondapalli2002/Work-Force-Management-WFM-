{"version":3,"names":["_helperPluginUtils","require","_core","_default","exports","default","declare","api","assertVersion","name","visitor","ObjectMethod","path","node","kind","func","t","functionExpression","params","body","generator","async","returnType","computedKey","toComputedKey","isStringLiteral","value","replaceWith","objectProperty","key","computed","ObjectProperty","shorthand"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(7));\n\n  return {\n    name: \"transform-shorthand-properties\",\n\n    visitor: {\n      ObjectMethod(path) {\n        const { node } = path;\n        if (node.kind === \"method\") {\n          const func = t.functionExpression(\n            null,\n            node.params,\n            node.body,\n            node.generator,\n            node.async,\n          );\n          func.returnType = node.returnType;\n\n          const computedKey = t.toComputedKey(node);\n          if (t.isStringLiteral(computedKey, { value: \"__proto__\" })) {\n            path.replaceWith(t.objectProperty(computedKey, func, true));\n          } else {\n            path.replaceWith(t.objectProperty(node.key, func, node.computed));\n          }\n        }\n      },\n\n      ObjectProperty(path) {\n        const { node } = path;\n        if (node.shorthand) {\n          const computedKey = t.toComputedKey(node);\n          if (t.isStringLiteral(computedKey, { value: \"__proto__\" })) {\n            path.replaceWith(t.objectProperty(computedKey, node.value, true));\n          } else {\n            node.shorthand = false;\n          }\n        }\n      },\n    },\n  };\n});\n